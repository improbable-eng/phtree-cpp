#!/usr/bin/env bash

TOOLS_DIR="$(dirname "$0")"

source "${TOOLS_DIR}"/../ci/includes/os.sh
source "${TOOLS_DIR}"/../ci/includes/bazel.sh

# All information required for the script to select or, if necessary, install bazel is contained
# in this code block.
# If a higher version of bazel is required, update `REQUIRED_BAZEL_VERSION` and the
# `REQUIRED_BAZEL_SHA256` values for each platform.
REQUIRED_BAZEL_VERSION="$(getBazelVersion)"
BAZEL_INSTALLATION_DIR="${HOME}/.bazel_installations/${REQUIRED_BAZEL_VERSION}"
if isLinux; then
  REQUIRED_BAZEL_SHA256="4df79462c6c3ecdeeee7af99fc269b52ab1aa4828ef3bc359c1837d3fafeeee7"
  REQUIRED_BAZEL_SHA256CMD="sha256sum"
  DOWNLOAD_CMD="wget -q --no-clobber -O bazel"
  BAZEL_EXE="bazel-${REQUIRED_BAZEL_VERSION}-linux-x86_64"

  if [[ "$(lsb_release -cs)" != "bionic" ]]; then
    echo -e "\033[0;33mWarning: You don't seem to be running Ubuntu 18.04, which is the supported Linux distribution. Continuing anyway, but your mileage might vary.\033[0m"
  fi

  if which clang-9 1>/dev/null; then
    # We follow the symlink of clang-9 here to avoid a bug with the LLVM package when combined with -no-canonical-prefixes.
    export CC="$(readlink -f "$(which clang-9)")"
  else
    echo -e "\033[0;33mWarning: You don't seem to have clang-9 correctly installed. Please check README.md to ensure your compiler is set up correctly. Continuing with whatever compiler bazel detects, your mileage might vary.\033[0m"
  fi
elif isMacOS; then
  REQUIRED_BAZEL_SHA256="3eca4c96cfda97a9d5f8d3d0dec4155a5cc5ff339b10d3f35213c398bf13881e"
  REQUIRED_BAZEL_SHA256CMD="shasum -a 256"
  DOWNLOAD_CMD="wget -q --no-clobber -O bazel"
  BAZEL_EXE="bazel-${REQUIRED_BAZEL_VERSION}-darwin-x86_64"
else
  REQUIRED_BAZEL_SHA256="cc7b3ff6f4bfd6bc2121a80656afec66ee57713e8b88e9d2fb58b4eddf271268"
  REQUIRED_BAZEL_SHA256CMD="sha256sum"
  DOWNLOAD_CMD="curl -L -s -o bazel.exe"
  # Windows does not have an installer but retrieves the executable directly.
  BAZEL_EXE="bazel-${REQUIRED_BAZEL_VERSION}-windows-x86_64.exe"

  export BAZEL_VC="C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC"
  if [[ ! -d "$BAZEL_VC" ]]; then
    export BAZEL_VC="C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC"
  fi
  if [[ ! -d "$BAZEL_VC" ]]; then
    echo -e "\033[0;33mWarning: You don't seem to have Visual Studio 2019 installed correctly. Continuing with whatever compiler bazel detects, your mileage might vary.\033[0m"
  fi
fi

BAZEL_TARGET_PATH="${BAZEL_INSTALLATION_DIR}/bin/bazel"

# Check if correct version is already installed.
if [[ -f "${BAZEL_TARGET_PATH}" ]]; then
  if [[ ! -x "${BAZEL_TARGET_PATH}" ]]; then
    echo "ERROR: Bazel executable at '${BAZEL_TARGET_PATH}' does not have execute permission"
    stat "${BAZEL_TARGET_PATH}"
    exit 1
  fi
  BAZEL_SUBCOMMAND="$1"
  shift
  exec -a "$0" "${BAZEL_TARGET_PATH}" "$BAZEL_SUBCOMMAND" "$@"
fi

cat << EOM
=================================================
Bazel version ${REQUIRED_BAZEL_VERSION} is not
installed under ~/.bazel_installations

Installing bazel ${REQUIRED_BAZEL_VERSION} now...
=================================================
EOM

# Create root directory if needed.
if [[ ! -d "${BAZEL_INSTALLATION_DIR}" ]]; then
  echo "Installation directory created."
  mkdir -p "${BAZEL_INSTALLATION_DIR}"
fi

function _are_checksums_equal() {
  CHECKSUM_A=$1
  CHECKSUM_B=$2
  # Split apart the checksum from the file name by splitting the returned string by the contained
  # space; the checksum has the format:
  # xxxxxx...xxxxx <filename>
  CHECKSUM_A_PARTS=(${CHECKSUM_A})
  CHECKSUM_B_PARTS=(${CHECKSUM_B})

  if [[ "${CHECKSUM_A_PARTS[0]}" == "${CHECKSUM_B_PARTS[0]}" ]]; then
    return 0 # True
  else
    return 1 # False
  fi
}

# Install correct bazel version.
# If we don't have a local Bazel install at this point we need to retrieve the right version from GitHub.
mkdir -p "${BAZEL_INSTALLATION_DIR}/bin/tmp"
pushd "${BAZEL_INSTALLATION_DIR}/bin/tmp"
rm bazel 2>/dev/null || true # Remove bazel binary if already present in tmp dir - indicates previous failed download.
echo "Starting download of bazel ${REQUIRED_BAZEL_VERSION}..."
${DOWNLOAD_CMD} "https://github.com/bazelbuild/bazel/releases/download/${REQUIRED_BAZEL_VERSION}/${BAZEL_EXE}"
echo "Download finished."
echo "Testing download file integrity..."
CALCULATED_CHECKSUM="$(${REQUIRED_BAZEL_SHA256CMD} bazel)"
if ! _are_checksums_equal "${CALCULATED_CHECKSUM}" "${REQUIRED_BAZEL_SHA256}"; then
  cat <<EOM
  ABORT - Downloaded Bazel failed the SHA-256 hash check.
  ABORT - Expected: ${REQUIRED_BAZEL_SHA256}  bazel
  ABORT - Found:    ${CALCULATED_CHECKSUM}
EOM
  exit 1
fi
# Mark downloaded file executable and move out of tmp directory.
chmod a+x "bazel"
mv bazel ..
popd

echo "Executing downloaded bazel..."
BAZEL_SUBCOMMAND="$1"
shift
exec -a "$0" "${BAZEL_TARGET_PATH}" "$BAZEL_SUBCOMMAND" "$@"
